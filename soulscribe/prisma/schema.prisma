// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth fields
  accounts      Account[]
  sessions      Session[]
  
  // SoulScribe specific fields
  stories       Story[]
  preferences   UserPreferences?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Story {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  summary     String?
  genre       StoryGenre?
  mood        StoryMood?
  theme       String?
  status      StoryStatus @default(DRAFT)
  isPublic    Boolean     @default(false)
  
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // AI generation metadata
  prompt      String?     @db.Text
  model       String?
  temperature Float?
  
  @@map("stories")
}

model UserPreferences {
  id              String @id @default(cuid())
  userId          String @unique
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Story generation preferences
  preferredGenre  StoryGenre?
  preferredMood   StoryMood?
  defaultTheme    String?
  
  // AI preferences
  preferredModel  String?
  temperature     Float?  @default(0.7)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("user_preferences")
}

enum StoryGenre {
  FANTASY
  SPIRITUAL
  WISDOM
  PARABLE
  MEDITATION
  INSPIRATION
  MYTHOLOGY
  PHILOSOPHY
  MYSTICAL
  SELF_HELP
}

enum StoryMood {
  PEACEFUL
  INSPIRING
  CONTEMPLATIVE
  UPLIFTING
  TRANSFORMATIVE
  HEALING
  GROUNDING
  AWAKENING
  ENLIGHTENING
  COMFORTING
}

enum StoryStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
